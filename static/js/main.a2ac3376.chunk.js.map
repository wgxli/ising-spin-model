{"version":3,"sources":["components/Graphics/index.js","components/Controls/Slider.js","components/Infobar/index.js","components/Controls/index.js","components/HelpText/index.js","simulation/index.js","simulation/build/vert.js","simulation/build/frag.js","App.js","serviceWorker.js","index.js"],"names":["Graphics","width","height","className","id","Slider","name","unit","icon","value","min","max","decimals","marks","onChange","toFixed","step","Math","pow","e","v","curie_scale_factor","log","sqrt","Entry","getCurieTemp","state","coupling","Infobar","responseFunctions","simWidth","simHeight","temperature","magnetization","k","ferromagnet","magnetization_eq","sinh","eq_sign","magnetization_text","abs","magnetization_sign","simulation_size","round","info","field","parameters","Controls","setState","Tc","label","style","color","setCurieTemperature","map","is_T","offset","key","newState","temp","updateThermometer","HelpText","useState","open","setOpen","onClick","stopPropagation","gl","setResponseFunctions","currentState","nextState","currAverage","nextAverage","framebuffer","program","iteration","pass","random_seed","uniforms","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","createTexture","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","initializeTexture","data","canvas","i","push","random","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","uniform2f","resolution","uniform1f","start","document","getElementById","getContext","vert","VERTEX_SHADER","frag","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","getProgramInfoLog","deleteProgram","positionAttr","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","Float32Array","STATIC_DRAW","createScreen","createFramebuffer","Object","entries","getUniformLocation","createUniforms","window","addEventListener","onResize","render","viewport","frame","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","drawArrays","TRIANGLES","pixels","readPixels","average","requestAnimationFrame","App","setAppState","useEffect","setTimeout","setWidth","setHeight","dpr","devicePixelRatio","innerWidth","innerHeight","preventDefault","passive","s","setGLState","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a2ac3376.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nfunction Graphics({width, height}) {\n    return <>\n        <div className='loading'>Loading...</div>\n        <canvas id='canvas' width={width} height={height}></canvas>\n    </>;\n}\n\nexport default Graphics;\n","import React from 'react';\nimport BaseSlider from '@material-ui/core/Slider';\nimport './slider.css';\n\nfunction Slider({\n    id,\n    name, unit, icon,\n    value,\n    min, max, decimals,\n    marks,\n    onChange\n}) {\n    return <div className={'slider ' + id}>\n        <p className='name'>\n        {name}\n        </p>\n        <p className='value'>\n        {value.toFixed(decimals)} {unit}\n        <span className='icon'>{icon}</span>\n        </p>\n        <BaseSlider\n            value={value}\n            min={min} max={max} step={Math.pow(10, -decimals)}\n            marks={marks}\n            onChange={(e, v) => onChange(v)}\n        />\n    </div>;\n}\n\nexport default Slider;\n","import React from 'react';\nimport './index.css';\n\n// Must be identical to that in frag.glsl\nconst boltzmann_constant = 4e-3;\nconst curie_scale_factor = 2/Math.log(1 + Math.sqrt(2));\n\nfunction Entry({name, value}) {\n    return <div className='entry'>\n        <p className='name'>{name}</p>\n        <p className='value'>\n            {value}\n            <span className='percent'>%</span>\n        </p>\n    </div>\n}\n\nfunction getCurieTemp(state) {\n    const {coupling} = state;\n    return curie_scale_factor * coupling/boltzmann_constant;\n}\n\nfunction Infobar({state, responseFunctions, simWidth, simHeight}) {\n    const {coupling, temperature} = state;\n    const {magnetization} = responseFunctions;\n\n    const k = coupling / (boltzmann_constant * temperature);\n\n    const ferromagnet = temperature < getCurieTemp(state);\n    const magnetization_eq = ferromagnet ? Math.pow(1 - Math.pow(Math.sinh(2*k), -4), 1/8) : 0;\n    const eq_sign = ferromagnet ? '± ' : '';\n\n    const magnetization_text = Math.abs(magnetization).toFixed(1);\n    const magnetization_sign = (magnetization < 0) ? '−' : '+';\n\n    const simulation_size = `${Math.round(simWidth)} × ${Math.round(simHeight)}`;\n\n    return <div className='info-bar'>\n        <Entry name='Magnetization' value={`${magnetization_sign} ${magnetization_text}`}/>\n        <Entry name='Spontaneous Magnetization' value={eq_sign + (100*magnetization_eq).toFixed(1)}/>\n        <div className='entry'>\n            <p className='caption'>\n            {`Simulation Size: ${simulation_size}`}\n            </p>\n        </div>\n        <div className='entry'>\n            <p className='caption'>\n                {'Made with <3 by Samuel J. Li'}</p>\n        </div>\n    </div>;\n}\n\nexport {getCurieTemp};\n\nexport default Infobar;\n","import React from 'react';\n\nimport {\n    FaThermometerEmpty, \n    FaThermometerQuarter,\n    FaThermometerHalf,\n    FaThermometerThreeQuarters,\n    FaThermometerFull\n} from 'react-icons/fa';\nimport {AiOutlineSwap as Coupling} from 'react-icons/ai';\nimport {IoIosMagnet as Magnet} from 'react-icons/io';\n\nimport Slider from './Slider.js'\nimport {getCurieTemp} from '../Infobar';\n\nimport './index.css';\n\nconst KELVIN_OFFSET = 273.15;\n\n// Name, max, step\nconst info = {\n    temperature: {\n        name: 'Temperature',\n        min: -50,\n        max: 100,\n        decimals: 1,\n        unit: '°C',\n        icon: <FaThermometerHalf/>,\n    },\n    coupling: {\n        name: 'Coupling Constant',\n        min: 0.45,\n        max: 0.55,\n        decimals: 3,\n        icon: <Coupling/>,\n    },\n    field: {\n        name: 'External Field Strength',\n        min: -0.1,\n        max: 0.1,\n        decimals: 3,\n        unit: 'T',\n        icon: <Magnet/>,\n    },\n}\n\n\n// For fun\nfunction updateThermometer(temp) {\n    let icon = <FaThermometerEmpty/>;\n    if (temp > -60) {icon = <FaThermometerQuarter/>;}\n    if (temp > -20) {icon = <FaThermometerHalf/>;}\n    if (temp > 20) {icon = <FaThermometerThreeQuarters/>;}\n    if (temp > 60) {icon = <FaThermometerFull/>;}\n    info.temperature.icon = icon;\n}\n\nfunction setCurieTemperature(state) {\n    const {temperature} = state;\n    const Tc = getCurieTemp(state);\n    const ferromagnet = (temperature < Tc);\n\n    const inactive = 'hsl(220, 10%, 70%)';\n    const active = 'hsl(220, 80%, 35%)';\n\n    info.temperature.marks = [{\n        value: Tc - KELVIN_OFFSET,\n        label: <span className='mark'>\n            <span className='aux-label' style={{\n                color: ferromagnet ? active : inactive,\n            }}>\n                {'Ferromagnet'}\n            </span>\n            <span style={{color: 'hsl(200, 10%, 20%)'}}>T<sub>c</sub></span>\n            <span className='aux-label' style={{\n                color: ferromagnet ? inactive : active,\n            }}>\n                {'Paramagnet'}\n            </span>\n        </span>,\n    }];\n}\n\nconst parameters = ['temperature', 'coupling', 'field'];\n\nfunction Controls({state, setState}) {\n    setCurieTemperature(state);\n    return <div id='controls'>{parameters.map(\n        (k) => {\n            const v = state[k];\n            const is_T = (k === 'temperature');\n            const offset = is_T ? KELVIN_OFFSET : 0;\n            return <Slider\n                key={k} id={k}\n                value={v - offset}\n                onChange={(v) => {\n                    const newState = {...state};\n                    if (is_T) {\n                        updateThermometer(v);\n                    }\n                    newState[k] = v + offset;\n                    setState(newState);\n                }}\n                {...info[k]}\n            />;\n         }\n    )}</div>\n}\n\nexport default Controls;\n","import React, {useState} from 'react';\nimport {IoIosMagnet as Magnet} from 'react-icons/io';\nimport './index.css';\n\nfunction HelpText() {\n    const [open, setOpen] = useState(true);\n\n    return <>\n        <div className={'help-container ' + (open ? 'open' : 'closed')} onClick={() => setOpen(false)}>\n        <div className='help-text' onClick={(e) => e.stopPropagation()}>\n            <div className='header'>\n                <span className='icon'><Magnet/></span>\n                <div className='title'>\n                    Ising Spin Model\n                    <p className='subtitle'>Made with {'<3'} by Samuel J. Li</p>\n                </div>\n            </div>\n            The <b>Ising spin model</b> is a simplified model of ferromagnetic material (e.g. iron) at the microscopic level.\n            Each pixel represents an electron, and its color represents the direction of its spin.\n\n            <p>Each electron is influenced by two opposing forces:</p>\n            <ul>\n                <li><b>Magnetism</b>, which tends to align the spin of each electron with its neighbors and the external magnetic field, and</li>\n                <li><b>Heat</b>, which causes random flucuations in orientation.</li>\n            </ul>\n            Despite its simplicity, the model exhibits complex behavior, including spontaneous magnetization, magnetic domains, and a Curie temperature.\n            <button onClick={() => setOpen(false)}>Got it!</button>\n            \n        </div></div>\n    </>\n}\n\nexport default HelpText;\n","import fragmentShader from './build/frag.js';\nimport vertexShader from './build/vert.js';\n\nlet gl = null;\nlet setResponseFunctions = null;\n\n\n// Textures for current and next simulation state\nlet currentState = null;\nlet nextState = null;\n\nlet currAverage = null;\nlet nextAverage = null;\n\nlet framebuffer = null;\nlet program = null;\n\n// Hyperparameters of simulation\nlet state = {\n    coupling: 0.5,\n    field: 0,\n    temperature: 283.65,\n    iteration: 0,\n    pass: 0,\n    random_seed: 0,\n};\n\n// Location of GLSL uniforms.\n// Will be initialized based on state.\nlet uniforms = {};\n\n\n// GLSL Initialization Functions\nfunction createShader(type, source) {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {return shader;}\n\n    // Log failure\n    console.error(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n}\n\nfunction createProgram() {\n    let vert = createShader(gl.VERTEX_SHADER, vertexShader);\n    let frag = createShader(gl.FRAGMENT_SHADER, fragmentShader);\n\n    program = gl.createProgram();\n    gl.attachShader(program, vert);\n    gl.attachShader(program, frag);\n    gl.linkProgram(program);\n\n    let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {gl.useProgram(program);}\n\n    // Log failure\n    console.error(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n}\n\nfunction createScreen() {\n    // Initialize vertex position buffers\n    let positionAttr = gl.getAttribLocation(program, 'a_position');\n    let positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    gl.enableVertexAttribArray(positionAttr);\n    gl.vertexAttribPointer(positionAttr, 2, gl.FLOAT, false, 0, 0);\n\n    // Create two triangles covering entire canvas\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n        -1, -1, 1, -1, -1, 1,\n        -1, 1, 1, -1, 1, 1\n    ]), gl.STATIC_DRAW);\n}\n\nfunction createTexture() {\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    // Initialize texture settings\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    initializeTexture();\n    return texture;\n}\n\nfunction createUniforms() {\n    // Initialize float uniforms\n    for (let [key, value] of Object.entries(state)) {\n        uniforms[key] = gl.getUniformLocation(program, 'u_' + key);\n        gl.uniform1f(uniforms[key], value);\n    }\n\n    // Initialize resolution uniform\n    uniforms.resolution = gl.getUniformLocation(program, 'u_resolution');\n}\n\n\n\n// GLSL Update Functions\nfunction initializeTexture() {\n    // Initialize empty texture\n    let data = []\n    let [width, height] = [gl.canvas.width, gl.canvas.height];\n    for (let i = 0; i < width * height * 4; i++) {\n        data.push((Math.random() < 0.5) ? 0 : 255);\n    }\n    gl.texImage2D(\n        gl.TEXTURE_2D, 0, gl.RGBA,\n        width, height, 0,\n        gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(data));\n    gl.uniform2f(uniforms.resolution, width, height);\n}\n\nfunction setState(name, value) {\n    state[name] = value;\n    gl.uniform1f(uniforms[name], value);\n}\n\n\n\n\n// Main initialization function\nfunction start() {\n    if (gl !== null) {return;}\n\n    // Get WebGL context\n    const canvas = document.getElementById('canvas');\n    gl = canvas.getContext('webgl');\n\n    // Initialize program\n    createProgram();\n    createScreen();\n\n    nextState = createTexture();\n    currentState = createTexture();\n\n    currAverage = createTexture();\n    nextAverage = createTexture();\n\n    framebuffer = gl.createFramebuffer();\n\n\n    createUniforms();\n\n    // Register resize handler\n    window.addEventListener('resize', onResize);\n    onResize();\n\n    render();\n}\n\nfunction onResize() {\n    gl.bindTexture(gl.TEXTURE_2D, currentState);\n    initializeTexture();\n    gl.bindTexture(gl.TEXTURE_2D, nextState);\n    initializeTexture();\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n}\n\nlet frame  = 0;\nfunction render() {\n    gl.bindTexture(gl.TEXTURE_2D, currentState);\n\n    // Render to texture\n    setState('pass', 0);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D, nextState, 0\n    );\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    // Render to screen\n    setState('pass', 1);\n    gl.bindTexture(gl.TEXTURE_2D, nextState);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    // Swap textures\n    let temp = currentState;\n    currentState = nextState;\n    nextState = temp;\n\n    // Compute averaging step\n    if (frame % 5 === 0) {\n        setState('pass', 3);\n        gl.bindTexture(gl.TEXTURE_2D, currAverage);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        gl.framebufferTexture2D(\n            gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\n            gl.TEXTURE_2D, nextAverage, 0\n        );\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n        // Swap textures\n        temp = currAverage;\n        currAverage = nextAverage;\n        nextAverage = temp;\n    }\n\n    // Sometimes read current average,\n    // and overwrite the average buffer\n    if (frame % 15 === 0) {\n        setState('pass', 2);\n\n        const pixels = new Uint8Array(4 * 100);\n        gl.bindTexture(gl.TEXTURE_2D, nextAverage);\n        gl.readPixels(0, 0, 10, 10, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n\n        let average = 0;\n        for (let i = 0; i < 100; i++) {\n            average += pixels[4*i] + (pixels[4*i+1] + (pixels[4*i+2] + pixels[4*i+3]/256)/256)/256;\n        }\n        average /= 100;\n        setResponseFunctions({\n            magnetization: 100 * (average/128 - 1)\n        });\n\n        gl.bindTexture(gl.TEXTURE_2D, currentState);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        gl.framebufferTexture2D(\n            gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\n            gl.TEXTURE_2D, currAverage, 0\n        );\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n\n    // Toggle iteration (odd/even)\n    setState('iteration', 1 - state.iteration);\n    setState('random_seed', Math.random());\n\n    frame += 1;\n    requestAnimationFrame(render);\n}\n\nfunction startSimulation(handleResponse) {\n    setResponseFunctions = handleResponse;\n    setTimeout(start, 1000);\n}\n\nexport {startSimulation, setState};\n","export default `\nattribute vec2 a_position;\n\nvarying vec2 v_texCoord;\n\nvoid main() {\n    v_texCoord = (a_position + 1.0) / 2.0;\n    gl_Position = vec4(a_position, 0, 1);\n}\n`;\n","export default `\nprecision highp float;\n\nuniform sampler2D u_spin;\nuniform vec2 u_resolution;\n\nuniform float u_coupling;\nuniform float u_field;\nuniform float u_temperature;\n\nuniform float u_pass;\nuniform float u_iteration;\nuniform float u_random_seed;\n\nvarying vec2 v_texCoord;\n\nconst float C_BOLTZMANN = 4e-3;\n\nvec4 get_pixel(float dx, float dy) {\n    return 2.0 * texture2D(\n        u_spin,\n        fract(v_texCoord + vec2(dx, dy) / u_resolution)\n    ) - 1.0;\n}\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat decode(vec4 v) {\n    v *= 255.0;\n    return (v.x + (v.y + (v.z + v.w/256.0)/256.0)/256.0)/256.0;\n}\n\nvec4 encode(float value) {\n    vec4 encoded = vec4(0.0, 0.0, 0.0, 0.0);\n    for (int i = 0; i < 4; i++) {\n        value *= 255.999;\n        float pixel = floor(value);\n        value -= pixel;\n        encoded[i] = pixel/255.0;\n    }\n    // To account for rounding bias\n    encoded[3] += value/255.0;\n    return encoded;\n}\n\nvoid main() {\n    vec4 current = get_pixel(0.0, 0.0);\n    vec4 new = (current + 1.0)/2.0;\n\n    // We cram a 2x2 block of binary spin states into each pixel:\n    // R G\n    // B A\n    vec4 top = get_pixel(0.0, 1.0);\n    vec4 bottom = get_pixel(0.0, -1.0);\n    vec4 left = get_pixel(-1.0, 0.0);\n    vec4 right = get_pixel(1.0, 0.0);\n\n    // Sum of four adjacent spin vectors for each 'subpixel'\n    vec4 adjacent_sum = vec4(\n        current.y + current.z + top.z + left.y,\n        current.x + current.w + top.w + right.x,\n        current.x + current.w + left.w + bottom.x,\n        current.y + current.z + right.z + bottom.y\n    );\n\n    // Render Passes\n    // 0: Compute simulated spins for next frame\n    // 1: Display average spin per cell (render to screen)\n    // 2: Display average spin per cell (render to texture)\n    // 3: Compute partial average (convolve with kernel)\n    if (u_pass < 0.5) {\n        // Compute new spins on pass 0, otherwise just display existing spins.\n        vec4 delta_h = 2.0 * current * (u_coupling * adjacent_sum + u_field);\n        float beta = 1.0 / (u_temperature * C_BOLTZMANN);\n        vec4 flip_probability = exp(-max(delta_h, 0.0) * beta);\n\n\n        vec2 noise = vec2(\n            rand(v_texCoord + u_random_seed * vec2(3.14159, 0.0)),\n            rand(v_texCoord + u_random_seed * vec2(0.0, 3.14159))\n        );\n\n        // Update only 'odd' checkerboard on odd iterations and vice-versa\n        if (u_iteration > 0.5) {\n            if (flip_probability.x > noise.x) {new.x = 1.0 - new.x;}\n            if (flip_probability.w > noise.y) {new.w = 1.0 - new.w;}\n        } else {\n            if (flip_probability.y > noise.x) {new.y = 1.0 - new.y;}\n            if (flip_probability.z > noise.y) {new.z = 1.0 - new.z;}\n        }\n\n        gl_FragColor = new;\n        return;\n    }\n\n    float average = (new.x + new.y + new.z + new.w) / 4.0;\n    if (u_pass < 1.5) {\n        gl_FragColor = vec4(average, average, average, 1.0);\n        return;\n    }\n\n    if (u_pass < 2.5) {\n        gl_FragColor = encode(average);\n        return;\n    }\n\n    vec4 k_average = vec4(0.0, 0.0, 0.0, 0.0);\n    for (int i = 0; i < 100; i++) {\n        float dx = rand(u_random_seed * vec2(float(i) * 3.14159, 0.0));\n        float dy = rand(u_random_seed * vec2(0.0, float(i) * 3.14159));\n        k_average += get_pixel(dx * u_resolution.x, dy * u_resolution.y);\n    }\n    k_average /= 200.0;\n    k_average += 0.5;\n\n    gl_FragColor = encode(decode(k_average));\n}\n`;\n","import React, {useState, useEffect} from 'react';\n\nimport Graphics from './components/Graphics';\nimport Controls from './components/Controls';\nimport Infobar from './components/Infobar';\nimport HelpText from './components/HelpText';\n\nimport {startSimulation, setState as setGLState} from './simulation';\n\nimport './App.css';\n\nfunction App() {\n    const [state, setAppState] = useState({\n        temperature: 283.65,\n        coupling: 0.5,\n        field: 0,\n    });\n    const setState = (s) => {\n        console.log(s);\n        for (let [k, v] of Object.entries(state)) {\n            setGLState(k, v);\n        }\n        setAppState(s);\n    }\n\n    const [responseFunctions, setResponseFunctions] = useState({\n        magnetization: 0\n    });\n    useEffect(() => startSimulation(setResponseFunctions, setAppState), []);\n\n    // Resize handler\n    const [width, setWidth] = useState(0);\n    const [height, setHeight] = useState(0);\n\n    const onResize = () => {\n        const dpr = window.devicePixelRatio;\n        setWidth(window.innerWidth * dpr);\n        setHeight(window.innerHeight * dpr);\n    }\n    useEffect(() => {\n        window.addEventListener('resize', onResize);\n        onResize();\n    });\n\n\n\n    // Prevent zoom on mobile\n    const preventDefault = (e) => e.preventDefault();\n    useEffect(() => {\n        document.addEventListener('gesturestart', preventDefault, {passive: false});\n        document.addEventListener('touchmove', preventDefault, {passive: false});\n    });\n\n    return <>\n        <Graphics width={width} height={height}/>\n        <Controls state={state} setState={setState}/>\n        <Infobar\n            state={state}\n            responseFunctions={responseFunctions}\n            simWidth={2 * width} simHeight={2 * height}\n        />\n        <HelpText/>\n    </>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}