{"version":3,"sources":["components/Graphics/index.js","components/Controls/Slider.js","components/Controls/index.js","components/Infobar/index.js","components/HelpText/index.js","simulation/index.js","simulation/build/vert.js","simulation/build/frag.js","App.js","serviceWorker.js","index.js"],"names":["Graphics","width","height","id","Slider","name","unit","icon","value","min","max","decimals","onChange","className","toFixed","step","Math","pow","e","v","info","temperature","coupling","field","Controls","state","setState","Object","entries","map","k","key","newState","temp","updateThermometer","curie_scale_factor","log","sqrt","Entry","Infobar","simWidth","simHeight","curie_temp","round","HelpText","useState","open","setOpen","onClick","stopPropagation","gl","currentState","nextState","framebuffer","program","iteration","pass","random_seed","uniforms","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","createTexture","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","initializeTexture","data","canvas","i","push","random","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","uniform2f","resolution","uniform1f","start","document","getElementById","getContext","vert","VERTEX_SHADER","frag","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","getProgramInfoLog","deleteProgram","positionAttr","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","Float32Array","STATIC_DRAW","createScreen","createFramebuffer","getUniformLocation","createUniforms","window","addEventListener","onResize","render","viewport","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","drawArrays","TRIANGLES","requestAnimationFrame","setTimeout","App","setAppState","setWidth","setHeight","dpr","devicePixelRatio","innerWidth","innerHeight","useEffect","preventDefault","passive","s","setGLState","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ba683ba2.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nfunction Graphics({width, height}) {\n    return <canvas id='canvas' width={width} height={height}></canvas>;\n}\n\nexport default Graphics;\n","import React from 'react';\nimport BaseSlider from '@material-ui/core/Slider';\nimport './slider.css';\n\nfunction Slider({\n    id,\n    name, unit, icon,\n    value,\n    min, max, decimals,\n    onChange\n}) {\n    return <div className={'slider ' + id}>\n        <p className='name'>\n        {name}\n        </p>\n        <p className='value'>\n        {value.toFixed(decimals)} {unit}\n        <span className='icon'>{icon}</span>\n        </p>\n        <BaseSlider\n            value={value}\n            min={min} max={max} step={Math.pow(10, -decimals)}\n            onChange={(e, v) => onChange(v)}\n        />\n    </div>;\n}\n\nexport default Slider;\n","import React from 'react';\n\nimport {\n    FaThermometerEmpty, \n    FaThermometerQuarter,\n    FaThermometerHalf,\n    FaThermometerThreeQuarters,\n    FaThermometerFull\n} from 'react-icons/fa';\nimport {AiOutlineSwap as Coupling} from 'react-icons/ai';\nimport {IoIosMagnet as Magnet} from 'react-icons/io';\n\nimport Slider from './Slider.js'\n\nimport './index.css';\n\n// Name, max, step\nconst info = {\n    temperature: {\n        name: 'Temperature',\n        min: 1,\n        max: 800,\n        decimals: 0,\n        unit: 'K',\n        icon: <FaThermometerHalf/>,\n    },\n    coupling: {\n        name: 'Coupling Constant',\n        min: 0.2,\n        max: 2,\n        decimals: 2,\n        icon: <Coupling/>,\n    },\n    field: {\n        name: 'External Field Strength',\n        min: -0.5,\n        max: 0.5,\n        decimals: 3,\n        unit: 'T',\n        icon: <Magnet/>\n    },\n}\n\n\n// For fun\nfunction updateThermometer(temp) {\n    let icon = <FaThermometerEmpty/>;\n    if (temp > 100) {icon = <FaThermometerQuarter/>;}\n    if (temp > 200) {icon = <FaThermometerHalf/>;}\n    if (temp > 400) {icon = <FaThermometerThreeQuarters/>;}\n    if (temp > 600) {icon = <FaThermometerFull/>;}\n    info.temperature.icon = icon;\n}\n\nfunction Controls({state, setState}) {\n    return <div id='controls'>{Object.entries(state).map(\n        ([k, v]) => {\n            return <Slider\n                key={k} id={k}\n                value={v}\n                onChange={(v) => {\n                    const newState = {...state};\n                    newState[k] = v;\n                    if (k === 'temperature') {updateThermometer(v);}\n                    setState(newState);\n                }}\n                {...info[k]}\n            />;\n         }\n    )}</div>\n}\n\nexport default Controls;\n","import React from 'react';\nimport './index.css';\n\n// Must be identical to that in frag.glsl\nconst boltzmann_constant = 4e-3;\nconst curie_scale_factor = 2/Math.log(1 + Math.sqrt(2));\n\nfunction Entry({name, value}) {\n    return <div className='entry'>\n        <p className='name'>{name}</p>\n        <p className='value'>{value}</p>\n    </div>\n}\n\nfunction Infobar({state, simWidth, simHeight}) {\n    let {coupling} = state;\n\n    let curie_temp = curie_scale_factor * coupling/boltzmann_constant\n\n    return <div className='info-bar'>\n        <Entry name='Curie Temperature' value={curie_temp.toFixed(1) + ' K'}/>\n        <Entry name='Simulation Size' value={Math.round(simWidth) + ' × ' + Math.round(simHeight)}/>\n    </div>;\n}\n\nexport default Infobar;\n","import React, {useState} from 'react';\nimport {IoIosMagnet as Magnet} from 'react-icons/io';\nimport './index.css';\n\nfunction HelpText() {\n    const [open, setOpen] = useState(true);\n\n    return <>\n        <div className={'help-container ' + (open ? 'open' : 'closed')} onClick={() => setOpen(false)}>\n        <div className='help-text' onClick={(e) => e.stopPropagation()}>\n            <div className='header'>\n                <span className='icon'><Magnet/></span>\n                <div className='title'>\n                    Ising Spin Model\n                    <p className='subtitle'>Made with {'<3'} by Samuel J. Li</p>\n                </div>\n            </div>\n            The <b>Ising spin model</b> is a simplified model of ferromagnetic material (e.g. iron) at the microscopic level.\n            Each pixel represents an electron, and its color represents the direction of its spin.\n\n            <p>Each electron is influenced by two opposing forces:</p>\n            <ul>\n                <li><b>Magnetism</b>, which tends to align the spin of each electron with its neighbors and the external magnetic field, and</li>\n                <li><b>Temperature</b>, which causes random flucuations in orientation.</li>\n            </ul>\n            Despite its simplicity, the model exhibits complex behavior, including spontaneous magnetization, magnetic domains, and a Curie temperature.\n            <button onClick={() => setOpen(false)}>Got it!</button>\n            \n        </div></div>\n    </>\n}\n\nexport default HelpText;\n","import fragmentShader from './build/frag.js';\nimport vertexShader from './build/vert.js';\n\nlet gl = null;\n\n\n// Textures for current and next simulation state\nlet currentState = null;\nlet nextState = null;\nlet framebuffer = null;\nlet program = null;\n\n// Hyperparameters of simulation\nlet state = {\n    coupling: 0.5,\n    field: 0,\n    temperature: 273,\n    iteration: 0,\n    pass: 0,\n    random_seed: 0,\n};\n\n// Location of GLSL uniforms.\n// Will be initialized based on state.\nlet uniforms = {};\n\n\n\n// GLSL Initialization Functions\nfunction createShader(type, source) {\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {return shader;}\n\n    // Log failure\n    console.error(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n}\n\nfunction createProgram() {\n    let vert = createShader(gl.VERTEX_SHADER, vertexShader);\n    let frag = createShader(gl.FRAGMENT_SHADER, fragmentShader);\n\n    program = gl.createProgram();\n    gl.attachShader(program, vert);\n    gl.attachShader(program, frag);\n    gl.linkProgram(program);\n\n    let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {gl.useProgram(program);}\n\n    // Log failure\n    console.error(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n}\n\nfunction createScreen() {\n    // Initialize vertex position buffers\n    let positionAttr = gl.getAttribLocation(program, 'a_position');\n    let positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    gl.enableVertexAttribArray(positionAttr);\n    gl.vertexAttribPointer(positionAttr, 2, gl.FLOAT, false, 0, 0);\n\n    // Create two triangles covering entire canvas\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n        -1, -1, 1, -1, -1, 1,\n        -1, 1, 1, -1, 1, 1\n    ]), gl.STATIC_DRAW);\n}\n\nfunction createTexture() {\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    // Initialize texture settings\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    initializeTexture();\n    return texture;\n}\n\nfunction createUniforms() {\n    // Initialize float uniforms\n    for (let [key, value] of Object.entries(state)) {\n        uniforms[key] = gl.getUniformLocation(program, 'u_' + key);\n        gl.uniform1f(uniforms[key], value);\n    }\n\n    // Initialize resolution uniform\n    uniforms.resolution = gl.getUniformLocation(program, 'u_resolution');\n}\n\n\n\n// GLSL Update Functions\nfunction initializeTexture() {\n    // Initialize empty texture\n    let data = []\n    let [width, height] = [gl.canvas.width, gl.canvas.height];\n    for (let i = 0; i < width * height * 4; i++) {\n        data.push((Math.random() < 0.5) ? 0 : 255);\n    }\n    gl.texImage2D(\n        gl.TEXTURE_2D, 0, gl.RGBA,\n        width, height, 0,\n        gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(data));\n    gl.uniform2f(uniforms.resolution, width, height);\n}\n\nfunction setState(name, value) {\n    state[name] = value;\n    gl.uniform1f(uniforms[name], value);\n}\n\n\n\n\n\n// Main initialization function\nfunction start() {\n    if (gl !== null) {return;}\n\n    // Get WebGL context\n    const canvas = document.getElementById('canvas');\n    gl = canvas.getContext('webgl');\n\n    // Initialize program\n    createProgram();\n    createScreen();\n\n    nextState = createTexture();\n    framebuffer = gl.createFramebuffer();\n    currentState = createTexture();\n\n    createUniforms();\n\n    // Register resize handler\n    window.addEventListener('resize', onResize);\n    onResize();\n\n    render();\n}\n\nfunction onResize() {\n    gl.bindTexture(gl.TEXTURE_2D, currentState);\n    initializeTexture();\n    gl.bindTexture(gl.TEXTURE_2D, nextState);\n    initializeTexture();\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n}\n\nfunction render() {\n    gl.bindTexture(gl.TEXTURE_2D, currentState);\n\n    // Render to texture\n    setState('pass', 0);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D, nextState, 0\n    );\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    // Render to screen\n    setState('pass', 1);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    // Swap textures\n    let temp = currentState;\n    currentState = nextState;\n    nextState = temp;\n\n    // Toggle iteration (odd/even)\n    setState('iteration', 1 - state.iteration);\n    setState('random_seed', Math.random());\n\n    requestAnimationFrame(render);\n}\n\n// Timeout to fix iPhone bug\ndocument.addEventListener('DOMContentLoaded', () => setTimeout(start, 100));\n\nexport {setState};\n","export default `\nattribute vec2 a_position;\n\nvarying vec2 v_texCoord;\n\nvoid main() {\n    v_texCoord = (a_position + 1.0) / 2.0;\n    gl_Position = vec4(a_position, 0, 1);\n}\n`;\n","export default `\nprecision highp float;\n\nuniform sampler2D u_spin;\nuniform vec2 u_resolution;\n\nuniform float u_coupling;\nuniform float u_field;\nuniform float u_temperature;\n\nuniform float u_pass;\nuniform float u_iteration;\nuniform float u_random_seed;\n\nvarying vec2 v_texCoord;\n\nconst float C_BOLTZMANN = 4e-3;\n\nvec4 get_pixel(float dx, float dy) {\n    return 2.0 * texture2D(\n        u_spin,\n        v_texCoord + vec2(dx, dy) / u_resolution\n    ) - 1.0;\n}\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid main() {\n    vec4 current = get_pixel(0.0, 0.0);\n    vec4 new = (current + 1.0)/2.0;\n\n    // We cram a 2x2 block of binary spin states into each pixel:\n    // R G\n    // B A\n    vec4 top = get_pixel(0.0, 1.0);\n    vec4 bottom = get_pixel(0.0, -1.0);\n    vec4 left = get_pixel(-1.0, 0.0);\n    vec4 right = get_pixel(1.0, 0.0);\n\n    // Sum of four adjacent spin vectors for each 'subpixel'\n    vec4 adjacent_sum = vec4(\n        current.y + current.z + top.z + left.y,\n        current.x + current.w + top.w + right.x,\n        current.x + current.w + left.w + bottom.x,\n        current.y + current.z + right.z + bottom.y\n    );\n\n    // Render to texture on pass zero, otherwise render to screen.\n    if (u_pass < 0.5) {\n        // Compute new spins on pass 0, otherwise just display existing spins.\n        vec4 delta_h = 2.0 * current * (u_coupling * adjacent_sum + u_field);\n        float beta = 1.0 / (u_temperature * C_BOLTZMANN);\n        vec4 flip_probability = exp(-max(delta_h, 0.0) * beta);\n\n        // Update only 'odd' checkerboard on odd iterations and vice-versa\n        vec2 noise = vec2(\n            rand(v_texCoord + u_random_seed * vec2(3.14159, 0.0)),\n            rand(v_texCoord + u_random_seed * vec2(0.0, 3.14159))\n        );\n        if (u_iteration > 0.5) {\n            if (flip_probability.x > noise.x) {new.x = 1.0 - new.x;}\n            if (flip_probability.w > noise.y) {new.w = 1.0 - new.w;}\n        } else {\n            if (flip_probability.y > noise.x) {new.y = 1.0 - new.y;}\n            if (flip_probability.z > noise.y) {new.z = 1.0 - new.z;}\n        }\n\n        gl_FragColor = new;\n    } else {\n        float average = (new.x + new.y + new.z + new.w) / 4.0;\n        gl_FragColor = vec4(average, average, average, 1.0);\n    }\n}\n`;\n","import React, {useState, useEffect} from 'react';\n\nimport Graphics from './components/Graphics';\nimport Controls from './components/Controls';\nimport Infobar from './components/Infobar';\nimport HelpText from './components/HelpText';\n\nimport {setState as setGLState} from './simulation';\n\nimport './App.css';\n\n\nfunction App() {\n    const [state, setAppState] = useState({\n        temperature: 273,\n        coupling: 0.5,\n        field: 0,\n    });\n    const setState = (s) => {\n        for (let [k, v] of Object.entries(s)) {\n            setGLState(k, v);\n        }\n        setAppState(s);\n    }\n\n    // Resize handler\n    const [width, setWidth] = useState(0);\n    const [height, setHeight] = useState(0);\n\n    const onResize = () => {\n        const dpr = window.devicePixelRatio;\n        setWidth(window.innerWidth * dpr);\n        setHeight(window.innerHeight * dpr);\n    }\n    useEffect(() => {\n        window.addEventListener('resize', onResize);\n        onResize();\n    });\n\n\n\n    // Prevent zoom on mobile\n    const preventDefault = (e) => e.preventDefault();\n    useEffect(() => {\n        document.addEventListener('gesturestart', preventDefault, {passive: false});\n        document.addEventListener('touchmove', preventDefault, {passive: false});\n    });\n\n    return <>\n        <Graphics width={width} height={height}/>\n        <Controls state={state} setState={setState}/>\n        <Infobar state={state} simWidth={2 * width} simHeight={2 * height}/>\n        <HelpText/>\n    </>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}